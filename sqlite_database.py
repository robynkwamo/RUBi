import sqlite3
from data import *

#### create a database file ####

conn = sqlite3.connect('dataHub.db')

####**** create a memory database for testing only ****####
# conn = sqlite3.connect(':memory:')

#### create a cursor to read through the database ####

c = conn.cursor()

#### drop table if exist ####

c.execute('DROP TABLE IF EXISTS totalSolar1')
c.execute('DROP TABLE IF EXISTS powerCostWeek1')
c.execute('DROP TABLE IF EXISTS powerCostWeekend1')
c.execute('DROP TABLE IF EXISTS isHomeWeek1')
c.execute('DROP TABLE IF EXISTS isHomeWeekend1')
c.execute('DROP TABLE IF EXISTS isSleepingWeek1')
c.execute('DROP TABLE IF EXISTS isSleepingWeekend1')
c.execute('DROP TABLE IF EXISTS isLightWeek1')
c.execute('DROP TABLE IF EXISTS isLightWeekend1')
c.execute('DROP TABLE IF EXISTS waterheaterPowerWeek1')
c.execute('DROP TABLE IF EXISTS LightPowerWeek1')
c.execute('DROP TABLE IF EXISTS LightPowerWeekend1')
c.execute('DROP TABLE IF EXISTS totalStaticPowerUsedWeek1')
c.execute('DROP TABLE IF EXISTS totalStaticPowerUsedWeekend1')
c.execute('DROP TABLE IF EXISTS tempPrefSimple0')
c.execute('DROP TABLE IF EXISTS tempPrefWeek1')
c.execute('DROP TABLE IF EXISTS tempPrefWeekend1')
c.execute('DROP TABLE IF EXISTS freeVariable')
c.execute('DROP TABLE IF EXISTS acPowerWeek')
c.execute('DROP TABLE IF EXISTS acPowerWeekend')
c.execute('DROP TABLE IF EXISTS carChargerPowerWeek')
c.execute('DROP TABLE IF EXISTS carChargerPowerWeekend')


#??????????????????????????????????????????????? TO DO LIST ???????????????????????????????????????????????????????????#
#                     Change some functions name to make them shorter                                                  #
#                                                                                                                      #
#??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????#

##########################******************** Unique variable import ******************################################
panelPower = panelPower
numPanels = numPanels
numLights = numLights
oneLightPower = oneLightPower
outsideTemp = outsideTemp
indoorTemp = indoorTemp
sleepingTemp = sleepingTemp

##########################******************** create a totalSolar1 table ******************############################

c.execute(""" CREATE TABLE IF NOT EXISTS totalSolar1 (
                dayTime INTEGER PRIMARY KEY AUTOINCREMENT, 
                powerAvailable INTEGER )""")

#### Insertion Methods in the database for totalSolar1 table ####
def insert_hourly_power():  # insert hourly power generated by the solar panel
    with conn:
        i = 0
        for item in totalSolarAvailable:
            c.execute("INSERT INTO totalSolar1 VALUES (?, ?)", (i, item))
            i = i + 1

#### Insert totalSolarAvailable in database ####
insert_hourly_power()

def get_hourly_power_by_daytime_from_db(dayTime):  # get hourly power by id
    c.execute("SELECT powerAvailable FROM totalSolar1 WHERE dayTime=?", (dayTime,))
    #c.execute("SELECT * FROM totalSolar1")                                                                             #### for debug only ####
    return c.fetchone()

#### Get the value of the power generated at x hour of the day ####
def convert_to_integer_get_hourly_power_by_daytime_from_db(dayTime):
    y = get_hourly_power_by_daytime_from_db(dayTime)
    z = y[0]
    return z
#print("The power generated at ", x, "is: ", z)                                                                         #### For debug only ####

#############################****************** create a powerCostWeek table *******************########################

c.execute(""" CREATE TABLE IF NOT EXISTS powerCostWeek1 (
                dayTime INTEGER PRIMARY KEY AUTOINCREMENT, 
                powerCost INTEGER )""")

#### Insertion Methods in the database for powerCostWeek1 table ####
def insert_power_cost_week():  # insert hourly power cost for week
    with conn:
        i = 0
        for item in powerCostWeek:
            c.execute("INSERT INTO powerCostWeek1 VALUES (?, ?)", (i, item))
            i = i + 1

#### Insert powerCostWeek data in database ####
insert_power_cost_week()

def get_hourly_power_cost_by_daytime_week_from_db(dayTime):  # get hourly power for week by id dayTime
    c.execute("SELECT powerCost FROM powerCostWeek1 WHERE dayTime=?", (dayTime,))
    #c.execute("SELECT * FROM powerCostWeek1")                                                                           #### For debug only ####
    return c.fetchone()

#### convert the value of the power cost at x hour of the day during the week to int ####
def convert_to_integer_get_hourly_power_cost_by_daytime_week_from_db(dayTime):
    y = get_hourly_power_cost_by_daytime_week_from_db(dayTime)
    z = y[0]
    return z
#print (get_hourly_power_cost_by_daytime_from_db())                                                                     #### For debug only ####

#############################****************** create a powerCostWeekend table *******************#####################

c.execute(""" CREATE TABLE IF NOT EXISTS powerCostWeekend1 (
                dayTime INTEGER PRIMARY KEY AUTOINCREMENT, 
                powerCost INTEGER )""")

#### Insertion Methods in the database for powerCostWeekend1 table ####
def insert_power_cost_weekend():  # insert hourly power cost for weekend
    with conn:
        i = 0
        for item in powerCostWeekend:
            c.execute("INSERT INTO powerCostWeekend1 VALUES (?, ?)", (i, item))
            i = i + 1

#### Insert powerCostWeek data in database ####
insert_power_cost_weekend()

def get_hourly_power_cost_by_daytime_weekend_from_db(dayTime):  # get hourly power for weekend by id dayTime
    c.execute("SELECT powerCost FROM powerCostWeekend1 WHERE dayTime=?", (dayTime,))
    #c.execute("SELECT * FROM powerCostWeekend1")                                                                       ### For debug only ####
    return c.fetchone()

#### convert the value of the power cost at x hour of the day to int ####
def convert_to_integer_get_hourly_power_cost_by_daytime_weekend_from_db(dayTime):
    y = get_hourly_power_cost_by_daytime_weekend_from_db(dayTime)
    z = y[0]
    return z
#print (get_hourly_power_cost_by_daytime_weekend_from_db())                                                             #### For debug only ####

#############################****************** create a isHomeWeek1 table *******************###########################

c.execute(""" CREATE TABLE IF NOT EXISTS isHomeWeek1 (
                dayTime INTEGER PRIMARY KEY AUTOINCREMENT, 
                isHome INTEGER )""")

#### Insertion Methods in the database for isHomeWeek1 table ####
def insert_isHomeWeek1():  # insert when the customer is home for the week ( 0 for not home and 1 for when he is home)
    with conn:
        i = 0
        for item in isHomeWeek:
            c.execute("INSERT INTO isHomeWeek1 VALUES (?, ?)", (i, item))
            i = i + 1

#### Insert when customer is home in database ####
insert_isHomeWeek1()

def get_hourly_isHomeweek_from_db(dayTime):  # get hourly when customer is home for week by id / dayTime
    c.execute("SELECT isHome FROM isHomeWeek1 WHERE dayTime=?", (dayTime,))
    #c.execute("SELECT * FROM isHomeWeek1")                                                                             ### For debug only ####
    return c.fetchone()

#### convert the value of when customer is home at x hour of the day to int ####
def convert_to_int_get_hourly_isHomeweek_from_db(dayTime):
    y = get_hourly_isHomeweek_from_db(dayTime)
    z = y[0]
    return z
#print (get_hourly_isHomeweek_from_db())                                                                                #### For debug only ####

#############################****************** create a isSleepingWeek1 table *******************######################

c.execute(""" CREATE TABLE IF NOT EXISTS isSleepingWeek1 (
                dayTime INTEGER PRIMARY KEY AUTOINCREMENT, 
                isSleeping INTEGER )""")

#### Insertion Methods in the database for isHomeWeek1 table ####
def insert_isSleepingWeek1():  # insert when the customer is home for the week ( 0 for not home and 1 for when he is home)
    with conn:
        i = 0
        for item in isSleepingWeek:
            c.execute("INSERT INTO isSleepingWeek1 VALUES (?, ?)", (i, item))
            i = i + 1

#### Insert when customer is home in database ####
insert_isSleepingWeek1()

def get_hourly_isSleepingWeek_from_db(dayTime):  # get hourly when customer is home for week by id / dayTime
    c.execute("SELECT isSleeping FROM isSleepingWeek1 WHERE dayTime=?", (dayTime,))
    #c.execute("SELECT * FROM isSleepingWeek1")                                                                         ### For debug only ####
    return c.fetchone()

#### convert the value of when customer is home at x hour of the day to int ####
def convert_to_int_get_hourly_isSleepingWeek_from_db(dayTime):
    y = get_hourly_isSleepingWeek_from_db(dayTime)
    z = y[0]
    return z
#print (get_hourly_isSleepingWeek_from_db())                                                                            #### For debug only ####


#############################****************** create a isHomeWeekend1 table *******************#######################

c.execute(""" CREATE TABLE IF NOT EXISTS isHomeWeekend1 (
                dayTime INTEGER PRIMARY KEY AUTOINCREMENT, 
                isHome INTEGER )""")

#### Insertion Methods in the database for isHomeWeekend1 table ####
def insert_isHomeWeekend1():  # insert when the customer is home for the weekend ( 0 for not home and 1 for when he is home)
    with conn:
        i = 0
        for item in isHomeWeekend:
            c.execute("INSERT INTO isHomeWeekend1 VALUES (?, ?)", (i, item))
            i = i + 1

#### Insert when customer is home in database ####
insert_isHomeWeekend1()

def get_hourly_isHomeweekend_from_db(dayTime):  # get hourly when customer is home for week by id / dayTime
    c.execute("SELECT isHome FROM isHomeWeekend1 WHERE dayTime=?", (dayTime,))
    #c.execute("SELECT * FROM isHomeWeekend1")                                                                             ### For debug only ####
    return c.fetchone()

#### convert the value of when customer is home at x hour of the day to int ####
def convert_to_int_get_hourly_isHomeweekend_from_db(dayTime):
    y = get_hourly_isHomeweekend_from_db(dayTime)
    z = y[0]
    return z
#print (get_hourly_isHomeweekend_from_db())                                                                                #### For debug only ####


#############################****************** create a isSleepingWeeken1 table *******************######################

c.execute(""" CREATE TABLE IF NOT EXISTS isSleepingWeekend1 (
                dayTime INTEGER PRIMARY KEY AUTOINCREMENT, 
                isSleeping INTEGER )""")

#### Insertion Methods in the database for isHomeWeek1 table ####
def insert_isSleepingWeekend1():  # insert when the customer is sleeping on the weekend ( 0 for not sleeping and 1 for sleeping)
    with conn:
        i = 0
        for item in isSleepingWeekend:
            c.execute("INSERT INTO isSleepingWeekend1 VALUES (?, ?)", (i, item))
            i = i + 1

#### Insert when customer is home in database ####
insert_isSleepingWeekend1()

def get_hourly_isSleepingWeekend_from_db(dayTime):  # get hourly when customer is home for weekend by id / dayTime
    c.execute("SELECT isSleeping FROM isSleepingWeek1 WHERE dayTime=?", (dayTime,))
    #c.execute("SELECT * FROM isSleepingWeekend1")                                                                      ### For debug only ####
    return c.fetchone()

#### convert the value of when customer is home at x hour of the day to int ####
def convert_to_int_get_hourly_isSleepingWeekend_from_db(dayTime):
    y = get_hourly_isSleepingWeekend_from_db(dayTime)
    z = y[0]
    return z
#print (get_hourly_isSleepingWeekend_from_db())                                                                          #### For debug only ####


#############################****************** create a isLightWeek1 table *******************#########################

c.execute(""" CREATE TABLE IF NOT EXISTS isLightWeek1 (
                dayTime INTEGER PRIMARY KEY AUTOINCREMENT, 
                isLight INTEGER )""")

#### Insertion Methods in the database for isLightWeek1 table ####
def insert_isLightWeek1():  # insert when the is on during the week ( 0 for off and 1 for on)
    with conn:
        i = 0
        for item in isLightWeek:
            c.execute("INSERT INTO isLightWeek1 VALUES (?, ?)", (i, item))
            i = i + 1

#### Insert when the light are on during the week in database ####
insert_isLightWeek1()

def get_hourly_isLightWeek_from_db(dayTime):  # get hourly when are on for week by id / dayTime
    c.execute("SELECT isLight FROM isLightWeek1 WHERE dayTime=?", (dayTime,))
    #c.execute("SELECT * FROM isLightWeek1")                                                                             ### For debug only ####
    return c.fetchone()

#### convert the value of when the light are on at x hour of the day to int ####
def convert_to_int_get_hourly_isLightWeek_from_db(dayTime):
    y = get_hourly_isLightWeek_from_db(dayTime)
    z = y[0]
    return z
#print (get_hourly_isLightWeek_from_db())                                                                                #### For debug only ####


#############################****************** create a isLightWeekend1 table *******************######################

c.execute(""" CREATE TABLE IF NOT EXISTS isLightWeekend1 (
                dayTime INTEGER PRIMARY KEY AUTOINCREMENT, 
                isLight INTEGER )""")

#### Insertion Methods in the database for isLightWeek1 table ####
def insert_isLightWeekend1():  # insert when the is on during the weekend ( 0 for off and 1 for on)
    with conn:
        i = 0
        for item in isLightWeekend:
            c.execute("INSERT INTO isLightWeekend1 VALUES (?, ?)", (i, item))
            i = i + 1

#### Insert when the light are on during the weekend in database ####
insert_isLightWeekend1()

def get_hourly_isLightWeekend_from_db(dayTime):  # get hourly when are on for weekend by id / dayTime
    c.execute("SELECT isLight FROM isLightWeekend1 WHERE dayTime=?", (dayTime,))
    #c.execute("SELECT * FROM isLightWeekend1")                                                                            ### For debug only ####
    return c.fetchone()

#### convert the value of when the light are on at x hour of the day to int ####
def convert_to_int_get_hourly_isLightWeekend_from_db(dayTime):
    y = get_hourly_isLightWeekend_from_db(dayTime)
    z = y[0]
    return z
#print (get_hourly_isLightWeekend_from_db())                                                                                #### For debug only ####


#############################****************** create a waterheaterPowerWeek1 table *******************#################

c.execute(""" CREATE TABLE IF NOT EXISTS waterheaterPowerWeek1 (
                dayTime INTEGER PRIMARY KEY AUTOINCREMENT, 
                isOn INTEGER )""")

#### Insertion Methods in the database for waterheaterPowerWeek1 table ####
def insert_waterheaterPowerWeek1():  # insert when the waterheater is on during the week ( 0 for off and 1 for on)
    with conn:
        i = 0
        for item in WaterheaterPowerWeek:
            c.execute("INSERT INTO WaterheaterPowerWeek1 VALUES (?, ?)", (i, item))
            i = i + 1

#### Insert when the light are on during the weekend in database ####
insert_waterheaterPowerWeek1()

def get_hourly_waterheaterPowerWeek_from_db(dayTime):  # get hourly when are on for weekend by id / dayTime
    c.execute("SELECT isOn FROM WaterheaterPowerWeek WHERE dayTime=?", (dayTime,))
    #c.execute("SELECT * FROM WaterheaterPowerWeek")                                                                            ### For debug only ####
    return c.fetchone()

#### convert the value of when the waterheater is on at x hour of the day to int ####
def convert_to_int_get_hourly_waterheaterPowerWeek_from_db(dayTime):
    y = get_hourly_waterheaterPowerWeek_from_db(dayTime)
    z = y[0]
    return z
#print (get_hourly_waterheaterPowerWeek_from_db())                                                                                #### For debug only ####


#############################****************** create a LightPowerWeek1 table *******************######################

c.execute(""" CREATE TABLE IF NOT EXISTS LightPowerWeek1 (
                dayTime INTEGER PRIMARY KEY AUTOINCREMENT, 
                lightCost INTEGER )""")

#### Insertion Methods in the database for LightPowerWeek1 table ####
def insert_LightPowerWeek1():  # insert when the light cost is on during the week ( 0 for off and 1 for on)
    with conn:
        i = 0
        for item in LightPowerWeek:
            c.execute("INSERT INTO LightPowerWeek1 VALUES (?, ?)", (i, item))
            i = i + 1

#### Insert what power the light consume during the week in database ####
insert_LightPowerWeek1()

def get_hourly_LightPowerWeek_from_db(dayTime):  # get hourly power consumption are on for week by id / dayTime
    c.execute("SELECT lightCost FROM LightPowerWeek1 WHERE dayTime=?", (dayTime,))
    #c.execute("SELECT * FROM LightPowerWeek1")                                                                            ### For debug only ####
    return c.fetchone()

#### convert the value of when the LightPowerWeek consume at x hour of the day to int ####
def convert_to_int_get_hourly_LightPowerWeek_from_db(dayTime):
    y = get_hourly_LightPowerWeek_from_db(dayTime)
    z = y[0]
    return z
#print (get_hourly_LightPowerWeek_from_db())


#############################****************** create a LightPowerWeekend1 table *******************######################

c.execute(""" CREATE TABLE IF NOT EXISTS LightPowerWeekend1 (
                dayTime INTEGER PRIMARY KEY AUTOINCREMENT, 
                lightCost INTEGER )""")

#### Insertion Methods in the database for LightPowerWeekend1 table ####
def insert_LightPowerWeekend1():  # insert when the light cost is on during the weekend ( 0 for off and 1 for on)
    with conn:
        i = 0
        for item in LightPowerWeekend:
            c.execute("INSERT INTO LightPowerWeekend1 VALUES (?, ?)", (i, item))
            i = i + 1

#### Insert what power the light consume during the weekend in database ####
insert_LightPowerWeekend1()

def get_hourly_LightPowerWeekend_from_db(dayTime):  # get hourly power consumption are on for weekend by id / dayTime
    c.execute("SELECT lightCost FROM LightPowerWeekend1 WHERE dayTime=?", (dayTime,))
    #c.execute("SELECT * FROM LightPowerWeekend1")                                                                            ### For debug only ####
    return c.fetchone()

#### convert the value of when the LightPowerWeekend1 consume at x hour of the day to int ####
def convert_to_int_get_hourly_LightPowerWeekend_from_db(dayTime):
    y = get_hourly_LightPowerWeekend_from_db(dayTime)
    z = y[0]
    return z
#print (get_hourly_LightPowerWeek_from_db())


#############################****************** create a totalStaticPowerUsedWeek1 table *******************############

c.execute(""" CREATE TABLE IF NOT EXISTS totalStaticPowerUsedWeek1 (
                dayTime INTEGER PRIMARY KEY AUTOINCREMENT, 
                staticPowerUsed INTEGER )""")

#### Insertion Methods in the database for totalStaticPowerUsedWeek table ####
def insert_totalStaticPowerUsedWeek1():  # insert what is the total power consume with Waterheater, FridgePower, LightPowerWeek during week day
    with conn:
        i = 0
        for item in totalStaticPowerUsedWeek:
            c.execute("INSERT INTO totalStaticPowerUsedWeek1 VALUES (?, ?)", (i, item))
            i = i + 1

#### Insert total power consumption in database ####
insert_totalStaticPowerUsedWeek1()

def get_hourly_totalStaticPowerUsedWeek_from_db(dayTime):  # get hourly power static consumption for week by id / dayTime
    c.execute("SELECT staticPowerUsed FROM totalStaticPowerUsedWeek1 WHERE dayTime=?", (dayTime,))
    #c.execute("SELECT * FROM totalStaticPowerUsedWeek1")                                                                            ### For debug only ####
    return c.fetchone()

#### convert the value of when the totalStaticPowerUsedWeek1 consume at x hour of the day to int ####
def convert_to_int_get_hourly_totalStaticPowerUsedWeek_from_db(dayTime):
    y = get_hourly_totalStaticPowerUsedWeek_from_db(dayTime)
    z = y[0]
    return z
#print (get_hourly_totalStaticPowerUsedWeek_from_db())


#############################****************** create a totalStaticPowerUsedWeekend1 table *******************############

c.execute(""" CREATE TABLE IF NOT EXISTS totalStaticPowerUsedWeekend1 (
                dayTime INTEGER PRIMARY KEY AUTOINCREMENT, 
                staticPowerUsed INTEGER )""")

#### Insertion Methods in the database for totalStaticPowerUsedWeekend table ####
def insert_totalStaticPowerUsedWeekend1():  # insert what is the total power consume with Waterheater, FridgePower, LightPowerWeek during weekend days
    with conn:
        i = 0
        for item in totalStaticPowerUsedWeekend:
            c.execute("INSERT INTO totalStaticPowerUsedWeekend1 VALUES (?, ?)", (i, item))
            i = i + 1

#### Insert total power consumption in database ####
insert_totalStaticPowerUsedWeekend1()

def get_hourly_totalStaticPowerUsedWeekend_from_db(dayTime):  # get hourly power static consumption for weekend days by id / dayTime
    c.execute("SELECT staticPowerUsed FROM totalStaticPowerUsedWeekend1 WHERE dayTime=?", (dayTime,))
    #c.execute("SELECT * FROM totalStaticPowerUsedWeekend1")                                                                            ### For debug only ####
    return c.fetchone()

#### convert the value of when the totalStaticPowerUsedWeekend1 consume at x hour of the day to int ####
def convert_to_int_get_hourly_totalStaticPowerUsedWeekend_from_db(dayTime):
    y = get_hourly_totalStaticPowerUsedWeekend_from_db(dayTime)
    z = y[0]
    return z
#print (get_hourly_totalStaticPowerUsedWeekend_from_db())


#############################****************** create a tempPrefSimple0 table *******************############

c.execute(""" CREATE TABLE IF NOT EXISTS tempPrefSimple0 (
                dayTime INTEGER PRIMARY KEY AUTOINCREMENT, 
                prefTemp INTEGER )""")

#### Insertion Methods in the database for tempPrefSimple0 table ####
def insert_tempPrefSimple():  # insert what is the prefered temperature
    with conn:
        i = 0
        for item in tempPrefSimple0:
            c.execute("INSERT INTO tempPrefSimple0 VALUES (?, ?)", (i, item))
            i = i + 1

#### Insert preferred temperature in database ####
insert_tempPrefSimple()

def get_hourly_tempPrefSimple0_from_db(dayTime):  # get hourly prefered temperature days by id / dayTime
    c.execute("SELECT prefTemp FROM tempPrefSimple0 WHERE dayTime=?", (dayTime,))
    #c.execute("SELECT * FROM tempPrefSimple0")                                                                            ### For debug only ####
    return c.fetchone()

#### convert the value of when the tempPrefSimple0 temperature at x hour of the day to int ####
def convert_to_int_get_hourly_tempPrefSimple_from_db(dayTime):
    y = get_hourly_tempPrefSimple0_from_db(dayTime)
    z = y[0]
    return z
#print (get_hourly_tempPrefSimple0_from_db())


#############################****************** create a tempPrefWeek0 table *******************########################

c.execute(""" CREATE TABLE IF NOT EXISTS tempPrefWeek1 (
                dayTime INTEGER PRIMARY KEY AUTOINCREMENT, 
                prefTemp INTEGER )""")

#### Insertion Methods in the database for tempPrefSimple0 table ####
def insert_tempPrefWeek1():  # insert what is the preferred temperature during week days
    with conn:
        i = 0
        for item in tempPrefWeek1:
            c.execute("INSERT INTO tempPrefWeek1 VALUES (?, ?)", (i, item))
            i = i + 1

#### Insert preferred temperature during the week in database ####
insert_tempPrefWeek1()

def get_hourly_tempPrefWeek1_from_db(dayTime):  # get hourly prefered temperature days during week days by id / dayTime
    c.execute("SELECT prefTemp FROM tempPrefWeek1 WHERE dayTime=?", (dayTime,))
    #c.execute("SELECT * FROM tempPrefWeek1")                                                                            ### For debug only ####
    return c.fetchone()

#### convert the value of when the tempPrefWeek1 temperature at x hour of the day to int ####
def convert_to_int_get_hourly_tempPrefWeek1_from_db(dayTime):
    y = get_hourly_tempPrefWeek1_from_db(dayTime)
    z = y[0]
    return z
#print (get_hourly_tempPrefWeek1_from_db())


#############################****************** create a tempPrefWeekend0 table *******************#####################

c.execute(""" CREATE TABLE IF NOT EXISTS tempPrefWeekend1 (
                dayTime INTEGER PRIMARY KEY AUTOINCREMENT, 
                prefTemp INTEGER )""")

#### Insertion Methods in the database for tempPrefSimple0 table ####
def insert_tempPrefWeekend1():  # insert what is the preferred temperature during weekend days
    with conn:
        i = 0
        for item in tempPrefWeekend1:
            c.execute("INSERT INTO tempPrefWeekend1 VALUES (?, ?)", (i, item))
            i = i + 1

#### Insert preferred temperature during the weekend in database ####
insert_tempPrefWeekend1()

def get_hourly_tempPrefWeekend1_from_db(dayTime):  # get hourly prefered temperature days during weekend days by id / dayTime
    c.execute("SELECT prefTemp FROM tempPrefWeekend1 WHERE dayTime=?", (dayTime,))
    #c.execute("SELECT * FROM tempPrefWeekend1")                                                                            ### For debug only ####
    return c.fetchone()

#### convert the value of when the tempPrefWeekend1 temperature at x hour of the day to int ####
def convert_to_int_get_hourly_tempPrefWeekend1_from_db(dayTime):
    y = get_hourly_tempPrefWeekend1_from_db(dayTime)
    z = y[0]
    return z
#print (get_hourly_tempPrefWeekend1_from_db())


#############################****************** create a tempPrefWeekend0 table *******************#####################

c.execute(""" CREATE TABLE IF NOT EXISTS tempPrefWeekend1 (
                dayTime INTEGER PRIMARY KEY AUTOINCREMENT, 
                prefTemp INTEGER )""")

#### Insertion Methods in the database for tempPrefSimple0 table ####
def insert_tempPrefWeekend1():  # insert what is the preferred temperature during weekend days
    with conn:
        i = 0
        for item in tempPrefWeekend1:
            c.execute("INSERT OR IGNORE INTO tempPrefWeekend1 VALUES (?, ?)", (i, item))
            i = i + 1

#### Insert preferred temperature during the weekend in database ####
insert_tempPrefWeekend1()

def get_hourly_tempPrefWeekend1_from_db(dayTime):  # get hourly prefered temperature days during weekend days by id / dayTime
    c.execute("SELECT prefTemp FROM tempPrefWeekend1 WHERE dayTime=?", (dayTime,))
    #c.execute("SELECT * FROM tempPrefWeekend1")                                                                            ### For debug only ####
    return c.fetchone()

#### convert the value of when the tempPrefWeekend1 temperature at x hour of the day to int ####
def convert_to_int_get_hourly_tempPrefWeekend1_from_db(dayTime):
    y = get_hourly_tempPrefWeekend1_from_db(dayTime)
    z = y[0]
    return z
#print (get_hourly_tempPrefWeekend1_from_db())


#############################****************** create a acPowerWeek table *******************#####################

c.execute(""" CREATE TABLE IF NOT EXISTS acPowerWeek (
                dayTime INTEGER PRIMARY KEY AUTOINCREMENT, 
                powerUsed INTEGER )""")

#### Insertion Methods in the database for acPowerWeek table ####
def insert_acPowerWeek():  # insert what is the ac power consumption during week days
    with conn:
        i = 0
        for item in acPowerWeek:
            c.execute("INSERT OR IGNORE INTO acPowerWeek VALUES (?, ?)", (i, item))
            i = i + 1

#### Insert ac power consumption during the week in database ####
insert_acPowerWeek()

def get_hourly_acPowerWeek_from_db(dayTime):  # get hourly power consumption during week days by id / dayTime
    c.execute("SELECT powerUsed FROM acPowerWeek WHERE dayTime=?", (dayTime,))
    #c.execute("SELECT * FROM acPowerWeek")                                                                             ### For debug only ####
    return c.fetchone()

#### convert the value of when the tempPrefWeekend1 temperature at x hour of the day to int ####
def convert_to_int_get_hourly_acPowerWeek_from_db(dayTime):
    y = get_hourly_acPowerWeek_from_db(dayTime)
    z = y[0]
    return z
#print (get_hourly_acPowerWeek_from_db())


#############################****************** create a acPowerWeekend table *******************#####################

c.execute(""" CREATE TABLE IF NOT EXISTS acPowerWeekend (
                dayTime INTEGER PRIMARY KEY AUTOINCREMENT, 
                powerUsed INTEGER )""")

#### Insertion Methods in the database for acPowerWeekend table ####
def insert_acPowerWeekend():  # insert what is the ac power consumption during weekend days
    with conn:
        i = 0
        for item in acPowerWeekend:
            c.execute("INSERT OR IGNORE INTO acPowerWeekend VALUES (?, ?)", (i, item))
            i = i + 1

#### Insert ac power consumption during the weekend in database ####
insert_acPowerWeekend()

def get_hourly_acPowerWeekend_from_db(dayTime):  # get hourly power consumption during weekend days by id / dayTime
    c.execute("SELECT powerUsed FROM acPowerWeekend WHERE dayTime=?", (dayTime,))
    #c.execute("SELECT * FROM acPowerWeekend")                                                                          ### For debug only ####
    return c.fetchone()

#### convert the value of when the tempPrefWeekend1 temperature at x hour of the day to int ####
def convert_to_int_get_hourly_acPowerWeekend_from_db(dayTime):
    y = get_hourly_acPowerWeekend_from_db(dayTime)
    z = y[0]
    return z
#print (get_hourly_acPowerWeekend_from_db())


#############################****************** create a carChargerPowerWeek table *******************#####################

c.execute(""" CREATE TABLE IF NOT EXISTS carChargerPowerWeek (
                dayTime INTEGER PRIMARY KEY AUTOINCREMENT, 
                powerUsed INTEGER )""")

#### Insertion Methods in the database for carChargerPowerWeek table ####
def insert_carChargerPowerWeek():  # insert what is the car charger power consumption during week days
    with conn:
        i = 0
        for item in carChargerPowerWeek:
            c.execute("INSERT OR IGNORE INTO carChargerPowerWeek VALUES (?, ?)", (i, item))
            i = i + 1

#### Insert car charger power consumption during the week in database ####
insert_carChargerPowerWeek()

def get_hourly_carChargerPowerWeek_from_db(dayTime):  # get hourly power consumption during week days by id / dayTime
    c.execute("SELECT powerUsed FROM carChargerPowerWeek WHERE dayTime=?", (dayTime,))
    #c.execute("SELECT * FROM carChargerPowerWeek")                                                                             ### For debug only ####
    return c.fetchone()

#### convert the value of when the carChargerPowerWeek temperature at x hour of the day to int ####
def convert_to_int_get_hourly_carChargerPowerWeek_from_db(dayTime):
    y = get_hourly_carChargerPowerWeek_from_db(dayTime)
    z = y[0]
    return z
#print (get_hourly_carChargerPowerWeek_from_db())


#############################****************** create a carChargerPowerWeekend table *******************###############

c.execute(""" CREATE TABLE IF NOT EXISTS carChargerPowerWeekend (
                dayTime INTEGER PRIMARY KEY AUTOINCREMENT, 
                powerUsed INTEGER )""")

#### Insertion Methods in the database for carChargerPowerWeekend table ####
def insert_carChargerPowerWeekend():  # insert what is the car charger power consumption during weekend days
    with conn:
        i = 0
        for item in carChargerPowerWeekend:
            c.execute("INSERT OR IGNORE INTO carChargerPowerWeekend VALUES (?, ?)", (i, item))
            i = i + 1

#### Insert car charger power consumption during the weekend in database ####
insert_carChargerPowerWeekend()

def get_hourly_carChargerPowerWeekend_from_db(dayTime):  # get hourly power consumption during weekend days by id / dayTime
    c.execute("SELECT powerUsed FROM carChargerPowerWeekend WHERE dayTime=?", (dayTime,))
    #c.execute("SELECT * FROM carChargerPowerWeekend")                                                                             ### For debug only ####
    return c.fetchone()

#### convert the value of when the carChargerPowerWeekend temperature at x hour of the day to int ####
def convert_to_int_get_hourly_carChargerPowerWeekend_from_db(dayTime):
    y = get_hourly_carChargerPowerWeekend_from_db(dayTime)
    z = y[0]
    return z
#print (get_hourly_carChargerPowerWeekend_from_db())


#############################****************** create a creditGeneratedWeek table *******************#####################

c.execute(""" CREATE TABLE IF NOT EXISTS creditGeneratedWeek (
                dayTime INTEGER PRIMARY KEY AUTOINCREMENT, 
                credit INTEGER )""")

#### Insertion Methods in the database for creditGeneratedWeek table ####
def insert_creditGeneratedWeek():  # insert what the credit generated during week days
    with conn:
        i = 0
        for item in creditGeneratedWeek:
            c.execute("INSERT OR IGNORE INTO creditGeneratedWeek VALUES (?, ?)", (i, item))
            i = i + 1

#### Insert credit generated during the weekend in database ####
insert_creditGeneratedWeek()

def get_hourly_creditGeneratedWeek_from_db(dayTime):  # get hourly credit generated during week days by id / dayTime
    c.execute("SELECT credit FROM creditGeneratedWeek WHERE dayTime=?", (dayTime,))
    #c.execute("SELECT * FROM creditGeneratedWeek")                                                                     ### For debug only ####
    return c.fetchone()

#### convert the value of when the creditGeneratedWeek temperature at x hour of the day to int ####
def convert_to_int_get_hourly_creditGeneratedWeek_from_db(dayTime):
    y = get_hourly_creditGeneratedWeek_from_db(dayTime)
    z = y[0]
    return z
#print (get_hourly_creditGeneratedWeek_from_db())


#############################****************** create a creditGeneratedWeekend table *******************#####################

c.execute(""" CREATE TABLE IF NOT EXISTS creditGeneratedWeekend (
                dayTime INTEGER PRIMARY KEY AUTOINCREMENT, 
                credit INTEGER )""")

#### Insertion Methods in the database for creditGeneratedWeekend table ####
def insert_creditGeneratedWeekend():  # insert what the credit generated during weekend days
    with conn:
        i = 0
        for item in creditGeneratedWeekend:
            c.execute("INSERT OR IGNORE INTO creditGeneratedWeekend VALUES (?, ?)", (i, item))
            i = i + 1

#### Insert credit generated during the weekend in database ####
insert_creditGeneratedWeekend()

def get_hourly_creditGeneratedWeekend_from_db(dayTime):  # get hourly credit generated during weekend days by id / dayTime
    c.execute("SELECT credit FROM creditGeneratedWeekend WHERE dayTime=?", (dayTime,))
    #c.execute("SELECT * FROM creditGeneratedWeekend")                                                                     ### For debug only ####
    return c.fetchone()

#### convert the value of when the creditGeneratedWeekend temperature at x hour of the day to int ####
def convert_to_int_get_hourly_creditGeneratedWeekend_from_db(dayTime):
    y = get_hourly_creditGeneratedWeekend_from_db(dayTime)
    z = y[0]
    return z
#print (get_hourly_creditGeneratedWeekend_from_db())


#############################****************** create a energyToBuyWeek table *******************#####################

c.execute(""" CREATE TABLE IF NOT EXISTS energyToBuyWeek (
                dayTime INTEGER PRIMARY KEY AUTOINCREMENT, 
                debit INTEGER )""")

#### Insertion Methods in the database for energyToBuyWeek table ####
def insert_energyToBuyWeek():  # insert what the debit cost during weekend days
    with conn:
        i = 0
        for item in energyToBuyWeek:
            c.execute("INSERT OR IGNORE INTO energyToBuyWeek VALUES (?, ?)", (i, item))
            i = i + 1

#### Insert debit generated during the week in database ####
insert_energyToBuyWeek()

def get_hourly_energyToBuyWeek_from_db(dayTime):  # get hourly debit cost during week days by id / dayTime
    c.execute("SELECT debit FROM energyToBuyWeek WHERE dayTime=?", (dayTime,))
    #c.execute("SELECT * FROM energyToBuyWeek")                                                                         ### For debug only ####
    return c.fetchone()

#### convert the value of when the energyToBuyWeek at x hour of the day to int ####
def convert_to_int_get_hourly_energyToBuyWeek_from_db(dayTime):
    y = get_hourly_energyToBuyWeek_from_db(dayTime)
    z = y[0]
    return z
#print (get_hourly_energyToBuyWeek_from_db())


#############################****************** create a energyToBuyWeekend table *******************###################

c.execute(""" CREATE TABLE IF NOT EXISTS energyToBuyWeekend (
                dayTime INTEGER PRIMARY KEY AUTOINCREMENT, 
                debit INTEGER )""")

#### Insertion Methods in the database for energyToBuyWeekend table ####
def insert_energyToBuyWeekend():  # insert what the credit cost during weekend days
    with conn:
        i = 0
        for item in energyToBuyWeekend:
            c.execute("INSERT OR IGNORE INTO energyToBuyWeekend VALUES (?, ?)", (i, item))
            i = i + 1

#### Insert credit cost during the weekend in database ####
insert_energyToBuyWeekend()

def get_hourly_energyToBuyWeekend_from_db(dayTime):  # get hourly debit cost during weekend days by id / dayTime
    c.execute("SELECT debit FROM energyToBuyWeekend WHERE dayTime=?", (dayTime,))
    #c.execute("SELECT * FROM energyToBuyWeekend")                                                                      ### For debug only ####
    return c.fetchone()

#### convert the value of when the energyToBuyWeekend at x hour of the day to int ####
def convert_to_int_get_hourly_energyToBuyWeekend_from_db(dayTime):
    y = get_hourly_energyToBuyWeekend_from_db(dayTime)
    z = y[0]
    return z
#print (get_hourly_energyToBuyWeekend_from_db())

# #############################****************** create a freeVariable table *******************#####################
#
# c.execute(""" CREATE TABLE IF NOT EXISTS freeVariable (
#                 id INTEGER PRIMARY KEY AUTOINCREMENT,
#                 val INTEGER )""")
#
# #### Insertion Methods in the database for tempPrefSimple0 table ####
# def insert_freeVariable(idn):  # insert what is the preferred temperature during weekend days
#     c.execute("INSERT INTO tempPrefWeekend1 VALUES (:id, :val)", {'id': idn.id, 'val': idn.val})
#     c.execute("INSERT INTO tempPrefWeekend1 VALUES (?, ?)", (2, numPanels))
#     c.execute("INSERT INTO tempPrefWeekend1 VALUES (?, ?)", (3, numLights))
#     c.execute("INSERT INTO tempPrefWeekend1 VALUES (?, ?)", (4, oneLightPower))
#     c.execute("INSERT INTO tempPrefWeekend1 VALUES (?, ?)", (5, outsideTemp))
#     c.execute("INSERT INTO tempPrefWeekend1 VALUES (?, ?)", (6, indoorTemp))
#     c.execute("INSERT INTO tempPrefWeekend1 VALUES (?, ?)", (7, sleepingTemp))
#
#     # c.execute("INSERT INTO employee VALUES (:first, :last, :pay)",
#     #           {'first': emp.first, 'last': emp.last, 'pay': emp.pay})
# #### Insert preferred temperature during the weekend in database ####
# insert_freeVariable()
#
# def freeVariable_from_db():  # get hourly prefered temperature days during weekend days by id / idn
#     #c.execute("SELECT val FROM freeVariable WHERE val=?", (idn,))
#     c.execute("SELECT * FROM freeVariable")                                                                            ### For debug only ####
#     return c.fetchone()
# print(freeVariable_from_db())
#
# #### convert the value of when the freeVariable temperature at x hour of the day to int ####
# def convert_to_int_freeVariable_from_db(idn):
#     y = freeVariable_from_db(idn)
#     z = y[0]
#     return z
# #print (get_hourly_freeVariable_from_db())

#conn.close()  # close database


